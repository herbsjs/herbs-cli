const { usecase, step, Ok } = require('@herbsjs/herbs')
const { herbarium } = require('@herbsjs/herbarium')
const <%- props.name.pascalCase %> = require('../../entities/<%- props.name.camelCase %>')
const <%- props.name.pascalCase %>Repository = require('../../../infra/data/repositories/<%- props.name.camelCase %>Repository')

const dependency = { <%- props.name.pascalCase %>Repository }

const findAll<%- props.name.pascalCase %> = injection =>
  usecase('Find all <%- props.name.raw %>s', {
    // Input/Request metadata and validation
    request: {
      limit: Number,
      offset: Number
    },

    // Output/Response metadata
    response: [<%- props.name.pascalCase %>],

    //Authorization with Audit
    // authorize: (user) => (user.canFindAll<%- props.name.pascalCase %> ? Ok() : Err()),
    authorize: () => Ok(),

    setup: ctx => (ctx.di = Object.assign({}, dependency, injection)),

    'Find and return all the <%- props.name.raw %>s': step(async ctx => {
      const repo = new ctx.di.<%- props.name.pascalCase %>Repository(injection)
      const <%- props.name.camelCase %>s = await repo.findAll(ctx.req)
      // ctx.ret is the return value of a use case
      return Ok(ctx.ret = <%- props.name.camelCase %>s)
    })
  })

module.exports =
  herbarium.usecases
    .add(findAll<%- props.name.pascalCase %>, 'FindAll<%- props.name.pascalCase %>')
    .metadata({ group: '<%- props.name.pascalCase %>', operation: herbarium.crud.readAll, entity: <%- props.name.pascalCase %> })
    .usecase
