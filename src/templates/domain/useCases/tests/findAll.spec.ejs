const <%- props.name.pascalCase %> = require('../../entities/<%- props.name.camelCase %>')
const findAll<%- props.name.pascalCase %> = require('./findAll<%- props.name.pascalCase %>')
const assert = require('assert').strict
const { spec, scenario, given, check } = require('@herbsjs/herbs').specs
const { herbarium } = require('@herbsjs/herbarium')

const findAll<%- props.name.pascalCase %>Spec = spec({

    usecase: findAll<%- props.name.pascalCase %>,
  
    'Find all <%- props.name.raw %>s': scenario({
      'Given an existing <%- props.name.raw %>': given({
        request: { limit: 0, offset: 0 },
        user: { hasAccess: true },
        injection: {
            <%- props.name.pascalCase %>Repository: class <%- props.name.pascalCase %>Repository {
              async findAll(id) { 
                  const fake<%- props.name.pascalCase %> = {
                    <%- props.mock %>
                  }
                  return ([<%- props.name.pascalCase %>.fromJSON(fake<%- props.name.pascalCase %>)]) 
              }
            }
          },
      }),

      // when: default when for use case

      'Must run without errors': check((ctx) => {
        assert.ok(ctx.response.isOk)  
      }),

      'Must return a list of <%- props.name.raw %>s': check((ctx) => {
        assert.equal(ctx.response.ok.length, 1)
      })

    }),

  })
  
module.exports =
  herbarium.nodes
    .add('FindAll<%- props.name.pascalCase %>Spec', findAll<%- props.name.pascalCase %>Spec, herbarium.node.spec)
    .link('FindAll<%- props.name.pascalCase %>')
    .value