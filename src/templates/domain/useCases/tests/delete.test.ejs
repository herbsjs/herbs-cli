const delete<%- props.name.pascalCase %> = require('./delete<%- props.name.pascalCase %>')
const assert = require('assert')


describe('Delete the <%- props.name.raw %>', () => {
  const authorizedUser = { hasAccess: true }

  describe('Valid <%- props.name.raw %>', () => {

    it('should delete the <%- props.name.raw %> if is valid', async () => {
      // Given
      const injection = {
        <%- props.name.camelCase %>Repository: new ( class <%- props.name.pascalCase %>Repository {
          async delete(entity) { return true }
        })
      }
      
      const req = {
        <%- props.request.valid %>
      }

      // When
      const uc = delete<%- props.name.pascalCase %>(injection)()
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isOk)      

    })
  })

  describe('Invalid <%- props.name.raw %>', () => {

    it('should not delete the invalid <%- props.name.pascalCase %>', async () => {
      // Given
      const req = { id : '5' }

      // When
      const uc = delete<%- props.name.pascalCase %>({})()
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isErr)
      assert.deepStrictEqual(ret.err, {request :[{id:[{wrongType:"Number"}]}]})
    })
  })
})
