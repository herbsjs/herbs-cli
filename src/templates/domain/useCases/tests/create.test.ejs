const create<%- props.name.pascalCase %> = require('./create<%- props.name.pascalCase %>')
const assert = require('assert')


describe('Create <%- props.name.raw %>', () => {
  const authorizedUser = { hasAccess: true }

  describe('Valid <%- props.name.raw %>', () => {

    it('should add <%- props.name.raw %> if is valid', async () => {
      // Given
      const injection = {
        <%- props.name.camelCase %>Repository: new ( class <%- props.name.pascalCase %>Repository {
          async insert(<%- props.name.camelCase %>) { return (<%- props.name.camelCase %>) }
        })
      }

      const req = {
        <%- props.request.valid %>
      }

      // When
      const uc = create<%- props.name.pascalCase %>(injection)()
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isOk)      
      assert.strictEqual(ret.ok.isValid(), true)

    })
  })

  describe('Invalid <%- props.name.raw %>', () => {

    it('should not create invalid <%- props.name.raw %>', async () => {
      // Given
      const injection = {}

      const req = {
        <%- props.request.invalid %>
      }

      // When
      const uc = create<%- props.name.pascalCase %>(injection)()
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isErr)
    })
  })
})
