const <%- props.name.pascalCase %> = require('../../entities/<%- props.name.camelCase %>')
const update<%- props.name.pascalCase %> = require('./update<%- props.name.pascalCase %>')
const assert = require('assert').strict
const { spec, scenario, given, check, samples } = require('@herbsjs/herbs').specs
const { herbarium } = require('@herbsjs/herbarium')

const update<%- props.name.pascalCase %>Spec = spec({

    usecase: update<%- props.name.pascalCase %>,
    'Update a existing <%- props.name.raw %> when it is valid': scenario({

      'Valid <%- props.name.raw %>s': samples([
        {
          <%- props.request.valid %>
        },
        {
          <%- props.request.valid %>
        }
      ]),
      
      'Valid <%- props.name.raw %>s Alternative': samples([
        {
          <%- props.request.valid %>
        },
        {
          <%- props.request.valid %>
        }
      ]),

      'Given a valid <%- props.name.raw %>': given((ctx) => ({
        request: ctx.sample,
        user: { hasAccess: true }
      })),

      'Given a repository with a existing <%- props.name.raw %>': given((ctx) => ({
        injection: {
            <%- props.name.pascalCase %>Repository: class <%- props.name.pascalCase %>Repository {
              async findByID(id) { 
                const fake<%- props.name.pascalCase %> = {
                    <%- props.mock %>
                }
                return ([<%- props.name.pascalCase %>.fromJSON(fake<%- props.name.pascalCase %>)])              }
              async update(id) { return true }
            }
          },
      })),

      // when: default when for use case

      'Must run without errors': check((ctx) => {
        assert.ok(ctx.response.isOk)  
      }),

      'Must confirm update': check((ctx) => {
        assert.ok(ctx.response.ok === true)
      })

    }),

    'Do not update a <%- props.name.raw %> when it is invalid': scenario({
      'Given a invalid <%- props.name.raw %>': given({
        request: {
          <%- props.request.invalid %>
        },
        user: { hasAccess: true },
        injection: {},
      }),

      // when: default when for use case

      'Must return an error': check((ctx) => {
        assert.ok(ctx.response.isErr)  
        // assert.ok(ctx.response.isInvalidEntityError)
      }),

    }),

    'Do not update <%- props.name.raw %> if it does not exist': scenario({
        'Given an empty <%- props.name.raw %> repository': given({
          request: {
              <%- props.request.valid %>
          },
          user: { hasAccess: true },
          injection:{
            <%- props.name.pascalCase %>Repository: class <%- props.name.pascalCase %>Repository {
              async findByID(id) { return [] }
            }
          },
        }),
  
        // when: default when for use case
  
        'Must return an error': check((ctx) => {
          assert.ok(ctx.response.isErr)
          assert.ok(ctx.response.isNotFoundError)  
        }),
      }),
  })
  
module.exports =
  herbarium.nodes
    .add('Update<%- props.name.pascalCase %>Spec', update<%- props.name.pascalCase %>Spec, herbarium.node.spec)
    .link('Update<%- props.name.pascalCase %>')
    .value