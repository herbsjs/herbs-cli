const update<%- props.name.pascalCase %> = require('./update<%- props.name.pascalCase %>')
const assert = require('assert')
const { <%- props.name.pascalCase %> } = require('../../entities')


describe('Update <%- props.name.raw %>', () => {
  const authorizedUser = { hasAccess: true }

  describe('Valid <%- props.name.raw %>', () => {

    it('should update <%- props.name.raw %> if is valid', async () => {
      // Given
      const retInjection = <%- props.name.pascalCase %>.fromJSON({ 
        <%- props.mock %>
      })
      const injection = {
        <%- props.name.camelCase %>Repository: new ( class <%- props.name.pascalCase %>Repository {
          async findByID(id) { return ([retInjection]) }
          async update(id) { return true }
        })
      }

      const req = {
        <%- props.request.valid %>
      }

      // When
      const uc = update<%- props.name.pascalCase %>(injection)()
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isOk)      

    })
  })

  describe('Invalid <%- props.name.raw %>', () => {

    it('should not update invalid <%- props.name.pascalCase %>', async () => {
      // Given
      const injection = {}
      const req = { 
        <%- props.request.invalid %>
      }

      // When
      const uc = update<%- props.name.pascalCase %>(injection)()
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isErr)
    })

    it('should not update non existing <%= props.name.pascalCase %>', async () => {
      // Given
      const retInjection = null
      const injection = {
        <%= props.name.camelCase %>Repository: new ( class <%= props.name.pascalCase %>Repository {
          async findByID(id) { return (retInjection) }
          async update(id) { return true }
        })
      }

      const req = { id: 0, nickname: 'herbsUser', password: 'V&eryStr0ngP@$$' }

      // When
      const uc = update<%= props.name.pascalCase %>(injection)()
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isErr)
      assert.ok(ret.isNotFoundError)
    })
  })
})
