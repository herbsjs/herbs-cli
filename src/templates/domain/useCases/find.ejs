const { usecase, step, Ok, Err } = require('@herbsjs/herbs')
const { herbarium } = require('@herbsjs/herbarium')
const <%- props.name.pascalCase %> = require('../../entities/<%- props.name.camelCase %>')
const <%- props.name.pascalCase %>Repository = require('../../../infra/data/repositories/<%- props.name.camelCase %>Repository')

const dependency = { <%- props.name.pascalCase %>Repository }

const find<%- props.name.pascalCase %> = injection =>
  usecase('Find a <%- props.name.raw %>', {
    // Input/Request metadata and validation 
    request: {
      id: String
    },

    // Output/Response metadata
    response: <%- props.name.pascalCase %>,

    //Authorization with Audit
    // authorize: (user) => (user.canFind<%- props.name.pascalCase %> ? Ok() : Err()),
    authorize: () => Ok(),

    setup: ctx => (ctx.di = Object.assign({}, dependency, injection)),

    'Find and return the <%- props.name.raw %>': step(async ctx => {
      const id = ctx.req.id
      const repo = new ctx.di.<%- props.name.pascalCase %>Repository(injection)
      const [<%- props.name.camelCase %>] = await repo.findByID(id)
      if (!<%- props.name.camelCase %>) return Err.notFound({ 
        message: `<%- props.name.raw %> entity not found by ID: ${id}`,
        payload: { entity: '<%- props.name.raw %>', id }
      })
      // ctx.ret is the return value of a use case
      return Ok(ctx.ret = <%- props.name.camelCase %>)
    })
  })

module.exports =
  herbarium.nodes
    .add('Find<%- props.name.pascalCase %>', find<%- props.name.pascalCase %>, herbarium.node.usecase)
    .link('<%- props.name.pascalCase %>')
    .metadata({ operation: herbarium.crud.read })
    .value