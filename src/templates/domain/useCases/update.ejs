const { usecase, step, Ok, Err, request } = require('@herbsjs/herbs')
const { herbarium } = require('@herbsjs/herbarium')
const merge = require('deepmerge')
const <%- props.name.pascalCase %> = require('../../entities/<%- props.name.camelCase %>')
const <%- props.name.pascalCase %>Repository = require('../../../infra/data/repositories/<%- props.name.camelCase %>Repository')

const dependency = { <%- props.name.pascalCase %>Repository }

const update<%- props.name.pascalCase %> = injection =>
  usecase('Update <%- props.name.raw %>', {
    // Input/Request metadata and validation 
    request: request.from(<%- props.name.pascalCase %>),

    // Output/Response metadata
    response: <%- props.name.pascalCase %>,

    //Authorization with Audit
    // authorize: (user) => (user.canUpdate<%- props.name.pascalCase %> ? Ok() : Err()),
    authorize: () => Ok(),

    setup: ctx => (ctx.di = Object.assign({}, dependency, injection)),

    'Retrieve the <%- props.name.raw %>': step(async ctx => {
      const id = ctx.req.id
      const repo = new ctx.di.<%- props.name.pascalCase %>Repository(injection)
      const [<%- props.name.camelCase %>] = await repo.findByID(id)
      ctx.<%- props.name.camelCase %> = <%- props.name.camelCase %>
      if (<%- props.name.camelCase %> === undefined) return Err.notFound({
        message: `<%- props.name.pascalCase %> not found - ID: ${id}`,
        payload: { entity: '<%- props.name.raw %>' }
      })

      return Ok(<%- props.name.camelCase %>)
    }),

    'Check if it is a valid <%- props.name.raw %> before update': step(ctx => {
      const old<%- props.name.pascalCase %> = ctx.<%- props.name.camelCase %>
      const new<%- props.name.pascalCase %> = <%- props.name.pascalCase %>.fromJSON(merge.all([ old<%- props.name.pascalCase %>, ctx.req ]))
      ctx.<%- props.name.camelCase %> = new<%- props.name.pascalCase %>

      return new<%- props.name.pascalCase %>.isValid() ? Ok() : Err.invalidEntity({
        message: `<%- props.name.pascalCase %> is invalid`,
        payload: { entity: '<%- props.name.raw %>' },
        cause: new<%- props.name.pascalCase %>.errors
      })

    }),

    'Update the <%- props.name.pascalCase %>': step(async ctx => {
      const repo = new ctx.di.<%- props.name.pascalCase %>Repository(injection)
      // ctx.ret is the return value of a use case
      return (ctx.ret = await repo.update(ctx.<%- props.name.camelCase %>))
    })

  })

module.exports =
  herbarium.usecases
    .add(update<%- props.name.pascalCase %>, 'Update<%- props.name.pascalCase %>')
    .metadata({ group: '<%- props.name.pascalCase %>', operation: herbarium.crud.update, entity: <%- props.name.pascalCase %> })
    .usecase