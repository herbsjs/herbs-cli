const { usecase, step, Ok, Err } = require('@herbsjs/herbs')
const { herbarium } = require('@herbsjs/herbarium')
const <%- props.name.pascalCase %> = require('../../entities/<%- props.name.camelCase %>')
const <%- props.name.pascalCase %>Repository = require('../../../infra/data/repositories/<%- props.name.camelCase %>Repository')

const dependency = { <%- props.name.pascalCase %>Repository }

const delete<%- props.name.pascalCase %> = injection =>
  usecase('Delete <%- props.name.raw %>', {
    // Input/Request metadata and validation 
    request: {
      id: String
    },

    // Output/Response metadata
    response: Boolean,

    //Authorization with Audit
    // authorize: (user) => (user.canDelete<%- props.name.pascalCase %> ? Ok() : Err()),
    authorize: () => Ok(),

    setup: ctx => (ctx.di = Object.assign({}, dependency, injection)),

    'Check if the <%- props.name.raw %> exist': step(async ctx => {
      const repo = new ctx.di.<%- props.name.pascalCase %>Repository(injection)
      const [<%- props.name.camelCase %>] = await repo.findByID(ctx.req.id)
      ctx.<%- props.name.camelCase %> = <%- props.name.camelCase %>

      if (<%- props.name.camelCase %>) return Ok()
      return Err.notFound({
          message: `<%- props.name.raw %> ID ${ctx.req.id} does not exist`,
          payload: { entity: '<%- props.name.raw %>' }
      })
    }),

    'Delete the <%- props.name.raw %>': step(async ctx => {
      const repo = new ctx.di.<%- props.name.pascalCase %>Repository(injection)
      ctx.ret = await repo.delete(ctx.<%- props.name.camelCase %>)
      // ctx.ret is the return value of a use case
      return Ok(ctx.ret)
    })
  })

module.exports =
  herbarium.nodes
    .add('Delete<%- props.name.pascalCase %>', delete<%- props.name.pascalCase %>, herbarium.node.usecase)
    .link('<%- props.name.pascalCase %>')
    .metadata({ operation: herbarium.crud.delete })
    .value