Usecase: Update User
Scenario: A user should be updated only if the user is valid
Given a valid user
When the user is updated
Then the user is updated

Scenario: A user should not be updated if the user is not valid
Given an invalid user
When the user is updated
Then the user is not updated

Scenario: A user should not be updated if the user does not exists
Given a user does not exists
When the user is updated
Then the user is not updated

Output:
~~~~
const User = require('../../entities/user')
const updateUser = require('./updateUser')
const assert = require('assert')
const { spec, scenario, given, check, samples } = require('@herbsjs/herbs').specs
const { herbarium } = require('@herbsjs/herbarium')

const updateUserSpec = spec({

    usecase: updateUser,

    // Scenario: A user should be updated only if the user is valid
    'Update a existing User when it is valid': scenario({

        'Valid Users': samples([
            {
                id: 'a text',
                nickname: 'a text',
                registrationNumber: 99,
                password: 'a text'
            },
            {
                id: 'a text',
                nickname: 'a text',
                registrationNumber: 99,
                password: 'a text'
            }
        ]),

        'Given a valid User': given((ctx) => ({
            request: ctx.sample,
            user: { hasAccess: true }
        })),

        'Given a repository with a existing User': given((ctx) => ({
            injection: {
                UserRepository: class UserRepository {
                    async findByID(id) {
                        const fakeUser = {
                            id: 'a text',
                            nickname: 'a text',
                            registrationNumber: 99,
                            password: 'a text'
                        }
                        return ([User.fromJSON(fakeUser)])
                    }
                    async update(id) { return true }
                }
            },
        })),

        // when: default when for use case

        'Must run without errors': check((ctx) => {
            assert.ok(ctx.response.isOk)
        }),

        'Must confirm update': check((ctx) => {
            assert.ok(ctx.response.ok === true)
        })

    }),

    // Scenario: A user should not be updated if the user is not valid
    'Do not update a User when it is invalid': scenario({
        'Given a invalid User': given({
            request: {
                id: true,
                nickname: true,
                registrationNumber: true,
                password: true
            },
            user: { hasAccess: true },
            injection: {},
        }),

        // when: default when for use case

        'Must return an error': check((ctx) => {
            assert.ok(ctx.response.isErr)
            // assert.ok(ctx.response.isInvalidEntityError)
        }),

    }),

    // Scenario: A user should not be updated if the user does not exists
    'Do not update User if it does not exist': scenario({
        'Given an empty User repository': given({
            request: {
                id: 'a text',
                nickname: 'a text',
                registrationNumber: 99,
                password: 'a text'
            },
            user: { hasAccess: true },
            injection: {
                UserRepository: class UserRepository {
                    async findByID(id) { return [] }
                }
            },
        }),

        // when: default when for use case

        'Must return an error': check((ctx) => {
            assert.ok(ctx.response.isErr)
            assert.ok(ctx.response.isNotFoundError)
        }),
    }),
})

module.exports =
    herbarium.nodes
        .add('UpdateUserSpec', updateUserSpec, herbarium.node.spec)
        .link('UpdateUser')
        .value
END

<%- props.scenarios %>

Output: